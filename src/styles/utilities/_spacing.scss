$spaces: '0', '025', '050', '075', '100', '150', '200', '300', '400', '500';


@function toNum($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}


@function toRem($value) {
	@return #{math.div(toNum($value), 100)}rem;
}


// Marings

@each $spaceValue in $spaces {
	.mt-#{$spaceValue} { margin-top: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.mr-#{$spaceValue} { margin-right: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.mb-#{$spaceValue} { margin-bottom: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.ml-#{$spaceValue} { margin-left: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.m-#{$spaceValue} { margin: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.my-#{$spaceValue} {
		margin-top: toRem($spaceValue) !important;
		margin-bottom: toRem($spaceValue) !important;
	}
}

@each $spaceValue in $spaces {
	.mx-#{$spaceValue} {
		margin-left: toRem($spaceValue) !important;
		margin-right: toRem($spaceValue) !important;
	}
}

.m-auto,
.mx-auto {
	margin-left: auto !important;
	margin-right: auto !important;
}
.m-auto,
.my-auto {
	margin-top: auto !important;
	margin-bottom: auto !important;
}
.mt-auto { margin-top: auto !important; }
.mr-auto { margin-right: auto !important; }
.mb-auto { margin-bottom: auto !important; }
.ml-auto { margin-left: auto !important; }

// Paddings

@each $spaceValue in $spaces {
	.pt-#{$spaceValue} { padding-top: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.pr-#{$spaceValue} { padding-right: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.pb-#{$spaceValue} { padding-bottom: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.pl-#{$spaceValue} { padding-left: toRem($spaceValue) !important; }
}

@each $spaceValue in $spaces {
	.p-#{$spaceValue} { padding: toRem($spaceValue) !important; }
}

.p-auto,
.px-auto {
	padding-left: auto !important;
	padding-right: auto !important;
}
.p-auto,
.py-auto {
	padding-top: auto !important;
	padding-bottom: auto !important;
}
.pt-auto { padding-top: auto !important; }
.pr-auto { padding-right: auto !important; }
.pb-auto { padding-bottom: auto !important; }
.pl-auto { padding-left: auto !important; }

@each $spaceValue in $spaces {
	.py-#{$spaceValue} {
		padding-top: toRem($spaceValue) !important;
		padding-bottom: toRem($spaceValue) !important;
	}
}

@each $spaceValue in $spaces {
	.px-#{$spaceValue} {
		padding-left: toRem($spaceValue) !important;
		padding-right: toRem($spaceValue) !important;
	}
}

@include mediaUp(sm) {

	/* Отступы
	=================== */

	@each $spaceValue in $spaces {
		.mt-sm-#{$spaceValue} { margin-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mr-sm-#{$spaceValue} { margin-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mb-sm-#{$spaceValue} { margin-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.ml-sm-#{$spaceValue} { margin-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.m-sm-#{$spaceValue} { margin: toRem($spaceValue) !important; }
	}

	/* Поля
	================= */

	@each $spaceValue in $spaces {
		.pt-sm-#{$spaceValue} { padding-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pr-sm-#{$spaceValue} { padding-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pb-sm-#{$spaceValue} { padding-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pl-sm-#{$spaceValue} { padding-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.p-sm-#{$spaceValue} { padding: toRem($spaceValue) !important; }
	}
}

@include mediaUp(md) {

	@each $spaceValue in $spaces {
		.mt-md-#{$spaceValue} { margin-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mr-md-#{$spaceValue} { margin-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mb-md-#{$spaceValue} { margin-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.ml-md-#{$spaceValue} { margin-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.m-md-#{$spaceValue} { margin: toRem($spaceValue) !important; }
	}


	@each $spaceValue in $spaces {
		.pt-md-#{$spaceValue} { padding-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pr-md-#{$spaceValue} { padding-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pb-md-#{$spaceValue} { padding-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pl-md-#{$spaceValue} { padding-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.p-md-#{$spaceValue} { padding: toRem($spaceValue) !important; }
	}
}

@include mediaUp(lg) {

	@each $spaceValue in $spaces {
		.mt-lg-#{$spaceValue} { margin-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mr-lg-#{$spaceValue} { margin-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.mb-lg-#{$spaceValue} { margin-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.ml-lg-#{$spaceValue} { margin-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.m-lg-#{$spaceValue} { margin: toRem($spaceValue) !important; }
	}


	@each $spaceValue in $spaces {
		.pt-lg-#{$spaceValue} { padding-top: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pr-lg-#{$spaceValue} { padding-right: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pb-lg-#{$spaceValue} { padding-bottom: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.pl-lg-#{$spaceValue} { padding-left: toRem($spaceValue) !important; }
	}

	@each $spaceValue in $spaces {
		.p-lg-#{$spaceValue} { padding: toRem($spaceValue) !important; }
	}
}

.flowMargin:first-child {
	margin-top: 0 !important;
}

.flowMargin:last-child {
	margin-bottom: 0 !important;
}
